# -*- coding: utf-8 -*-
"""credit_card fraud detection

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_lZl2N8bvCAcHWzLASB_tpIeXq0PTnsM

Importing the dependies
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

#loading dataset to a pandas dataframe
credit_card_data=pd.read_csv("/content/creditcard.csv",on_bad_lines='skip',low_memory=False)

"""# New Section

# New Section
"""

#first 5 rows of dataset
credit_card_data.head()

credit_card_data.tail()

#dataset information
credit_card_data.info()

#checking the number of missing value
credit_card_data.isnull().sum()

#distribution of legit transaction and fraud transaction
credit_card_data['Class'].value_counts()

#separating the data for analysis
legit = credit_card_data[credit_card_data.Class==0]
fraud = credit_card_data[credit_card_data.Class==1]

print(legit.shape)
print(fraud.shape)

#statistical measure
legit.Amount.describe()

fraud.Amount.describe()

#compare the values for both transactions
credit_card_data.groupby('Class').mean()

"""Build a sample dataset containing similar distru=ibution of normal transaction"""

legit_sample= legit.sample(n=541)

new_data_set = pd.concat([legit_sample,fraud],axis=0)

new_data_set.head()

new_data_set.tail()

new_data_set['Class'].value_counts()

new_data_set.groupby('Class').mean()

x = new_data_set.drop(columns='Class',axis=1)
y=new_data_set['Class']

print(x)

print(y)

x_train,x_test,y_train,y_test=train_test_split(x,y, test_size=0.2,stratify=y,random_state=2)

print(x.shape,x_train.shape,x_test.shape)

model=LogisticRegression()

#training the logistic model with training data
model.fit(x_train,y_train)

#accuracy on training data
x_train_prediction=model.predict(x_train)
training_data_accuracy=accuracy_score(x_train_prediction,y_train)

print("Accuracy on training data:",training_data_accuracy)

#accuracy on test data
x_test_prediction= model.predict(x_test)
test_data_accuracy=accuracy_score(x_test_prediction,y_test)

print("accuracy on test data:",test_data_accuracy)